PACKAGE = "flight_ctrl"

from dynamic_reconfigure.parameter_generator_catkin import *

def add_pid_params(gen, name):
    # 基本参数
    gen.add(name + "_p", double_t, 0, "Proportional gain", 1.0, 0, 10)
    gen.add(name + "_i", double_t, 0, "Integral gain", 0.0, 0, 10)
    gen.add(name + "_d", double_t, 0, "Derivative gain", 0.0, 0, 10)
    
    # 积分限幅
    gen.add(name + "_integral_lim", double_t, 0, "Integral limit", 0.5, 0, 10)
    
    # 输出限幅
    gen.add(name + "_min_output", double_t, 0, "Minimum output", 0.0, -10, 10)
    gen.add(name + "_max_output", double_t, 0, "Maximum output", 0.5, -10, 10)
    
    # 高级功能标志
    gen.add(name + "_integral_sepration_flag", bool_t, 0, "Integral separation flag", False)
    gen.add(name + "_dead_zone_flag", bool_t, 0, "Dead zone flag", False)
    gen.add(name + "_d_filter_flag", bool_t, 0, "Derivative filter flag", False)
    gen.add(name + "_d_first_flag", bool_t, 0, "Derivative first flag", False)
    
    # 高级功能阈值
    gen.add(name + "_integral_sepration_threshold", double_t, 0, "Integral separation threshold", 0.2, 0, 10)
    gen.add(name + "_dead_zone_threshold", double_t, 0, "Dead zone threshold", 0.05, 0, 1)
    gen.add(name + "_d_filter_value", double_t, 0, "Derivative filter value", 0.5, 0, 1)

def generate_dynamic_reconfigure_parameters():

    gen = ParameterGenerator()

    # 为每个PID控制器添加参数
    add_pid_params(gen, "x")
    add_pid_params(gen, "y")
    add_pid_params(gen, "z")
    add_pid_params(gen, "yaw")
    exit(gen.generate(PACKAGE, "pid", "PidGains"))

generate_dynamic_reconfigure_parameters()